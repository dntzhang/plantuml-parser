// tslint:disable:only-arrow-functions
// tslint:disable:object-literal-shorthand
// tslint:disable:trailing-comma
// tslint:disable:object-literal-sort-keys
// tslint:disable:one-variable-per-declaration
// tslint:disable:max-line-length
// tslint:disable:no-consecutive-blank-lines
// tslint:disable:align
// tslint:disable:no-console
// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )
//
// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.parse = exports.DefaultTracer = exports.SyntaxError = void 0;
// import types
var types = require("./types");
var SyntaxError = /** @class */ (function (_super) {
    __extends(SyntaxError, _super);
    function SyntaxError(message, expected, found, location) {
        var _this = _super.call(this) || this;
        _this.message = message;
        _this.expected = expected;
        _this.found = found;
        _this.location = location;
        _this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(_this, SyntaxError);
        }
        return _this;
    }
    SyntaxError.buildMessage = function (expected, found) {
        function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
            return s
                .replace(/\\/g, "\\\\")
                .replace(/"/g, "\\\"")
                .replace(/\0/g, "\\0")
                .replace(/\t/g, "\\t")
                .replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
        }
        function classEscape(s) {
            return s
                .replace(/\\/g, "\\\\")
                .replace(/\]/g, "\\]")
                .replace(/\^/g, "\\^")
                .replace(/-/g, "\\-")
                .replace(/\0/g, "\\0")
                .replace(/\t/g, "\\t")
                .replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
        }
        function describeExpectation(expectation) {
            switch (expectation.type) {
                case "literal":
                    return "\"" + literalEscape(expectation.text) + "\"";
                case "class":
                    var escapedParts = expectation.parts.map(function (part) {
                        return Array.isArray(part)
                            ? classEscape(part[0]) + "-" + classEscape(part[1])
                            : classEscape(part);
                    });
                    return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
                case "any":
                    return "any character";
                case "end":
                    return "end of input";
                case "other":
                    return expectation.description;
            }
        }
        function describeExpected(expected1) {
            var descriptions = expected1.map(describeExpectation);
            var i;
            var j;
            descriptions.sort();
            if (descriptions.length > 0) {
                for (i = 1, j = 1; i < descriptions.length; i++) {
                    if (descriptions[i - 1] !== descriptions[i]) {
                        descriptions[j] = descriptions[i];
                        j++;
                    }
                }
                descriptions.length = j;
            }
            switch (descriptions.length) {
                case 1:
                    return descriptions[0];
                case 2:
                    return descriptions[0] + " or " + descriptions[1];
                default:
                    return descriptions.slice(0, -1).join(", ")
                        + ", or "
                        + descriptions[descriptions.length - 1];
            }
        }
        function describeFound(found1) {
            return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };
    return SyntaxError;
}(Error));
exports.SyntaxError = SyntaxError;
var DefaultTracer = /** @class */ (function () {
    function DefaultTracer() {
        this.indentLevel = 0;
    }
    DefaultTracer.prototype.trace = function (event) {
        var that = this;
        function log(evt) {
            function repeat(text, n) {
                var result = "", i;
                for (i = 0; i < n; i++) {
                    result += text;
                }
                return result;
            }
            function pad(text, length) {
                return text + repeat(" ", length - text.length);
            }
            if (typeof console === "object") {
                console.log(evt.location.start.line + ":" + evt.location.start.column + "-"
                    + evt.location.end.line + ":" + evt.location.end.column + " "
                    + pad(evt.type, 10) + " "
                    + repeat("  ", that.indentLevel) + evt.rule);
            }
        }
        switch (event.type) {
            case "rule.enter":
                log(event);
                this.indentLevel++;
                break;
            case "rule.match":
                this.indentLevel--;
                log(event);
                break;
            case "rule.fail":
                this.indentLevel--;
                log(event);
                break;
            default:
                throw new Error("Invalid event type: " + event.type + ".");
        }
    };
    return DefaultTracer;
}());
exports.DefaultTracer = DefaultTracer;
function peg$parse(input, options) {
    options = options !== undefined ? options : {};
    var peg$FAILED = {};
    var peg$startRuleFunctions = { PlantUMLFile: peg$parsePlantUMLFile };
    var peg$startRuleFunction = peg$parsePlantUMLFile;
    var peg$c0 = function (diagrams) {
        return diagrams;
    };
    var peg$c1 = "@startuml";
    var peg$c2 = peg$literalExpectation("@startuml", false);
    var peg$c3 = peg$anyExpectation();
    var peg$c4 = function () {
        return [];
    };
    var peg$c5 = "@enduml";
    var peg$c6 = peg$literalExpectation("@enduml", false);
    var peg$c7 = function (uml) {
        return uml;
    };
    var peg$c8 = "(";
    var peg$c9 = peg$literalExpectation("(", false);
    var peg$c10 = "id";
    var peg$c11 = peg$literalExpectation("id", false);
    var peg$c12 = "=";
    var peg$c13 = peg$literalExpectation("=", false);
    var peg$c14 = ")";
    var peg$c15 = peg$literalExpectation(")", false);
    var peg$c16 = function (elements) {
        return new types.UML(removeUndefined(elements));
    };
    var peg$c17 = "}";
    var peg$c18 = peg$literalExpectation("}", false);
    var peg$c19 = "end note";
    var peg$c20 = peg$literalExpectation("end note", false);
    var peg$c21 = function () { };
    var peg$c22 = "'";
    var peg$c23 = peg$literalExpectation("'", false);
    var peg$c24 = function (comment) {
        return new types.Comment(extractText(comment));
    };
    var peg$c25 = "/'";
    var peg$c26 = peg$literalExpectation("/'", false);
    var peg$c27 = "'/";
    var peg$c28 = peg$literalExpectation("'/", false);
    var peg$c29 = "skinparam ";
    var peg$c30 = peg$literalExpectation("skinparam ", true);
    var peg$c31 = "{";
    var peg$c32 = peg$literalExpectation("{", false);
    var peg$c33 = function (name) {
    };
    var peg$c34 = function () {
    };
    var peg$c35 = "together ";
    var peg$c36 = peg$literalExpectation("together ", true);
    var peg$c37 = function (elements) {
        return removeUndefined(elements);
    };
    var peg$c38 = " ";
    var peg$c39 = peg$literalExpectation(" ", false);
    var peg$c40 = function (type, name, elements) {
        return new types.Group(name.name, name.title, type, removeUndefined(elements));
    };
    var peg$c41 = "package";
    var peg$c42 = peg$literalExpectation("package", true);
    var peg$c43 = "namespace";
    var peg$c44 = peg$literalExpectation("namespace", true);
    var peg$c45 = "node";
    var peg$c46 = peg$literalExpectation("node", true);
    var peg$c47 = "folder";
    var peg$c48 = peg$literalExpectation("folder", true);
    var peg$c49 = "frame";
    var peg$c50 = peg$literalExpectation("frame", true);
    var peg$c51 = "cloud";
    var peg$c52 = peg$literalExpectation("cloud", true);
    var peg$c53 = "database";
    var peg$c54 = peg$literalExpectation("database", true);
    var peg$c55 = "rectangle";
    var peg$c56 = peg$literalExpectation("rectangle", true);
    var peg$c57 = "note ";
    var peg$c58 = peg$literalExpectation("note ", true);
    var peg$c59 = ":";
    var peg$c60 = peg$literalExpectation(":", false);
    var peg$c61 = function (of, text) {
        return new types.Note(extractText(text), of);
    };
    var peg$c62 = "as ";
    var peg$c63 = peg$literalExpectation("as ", false);
    var peg$c64 = function (text) {
        return new types.Note(text);
    };
    var peg$c65 = "of ";
    var peg$c66 = peg$literalExpectation("of ", true);
    var peg$c67 = "::";
    var peg$c68 = peg$literalExpectation("::", true);
    var peg$c69 = function (elementName, memberName) {
        return elementName.name + "::" + memberName.name;
    };
    var peg$c70 = function (elementName) {
        return elementName.name;
    };
    var peg$c71 = "abstract ";
    var peg$c72 = peg$literalExpectation("abstract ", true);
    var peg$c73 = "class ";
    var peg$c74 = peg$literalExpectation("class ", false);
    var peg$c75 = function (isAbstract, name, extends_, implements_, members) {
        return new types.Class(name.name, name.title, !!isAbstract, removeUndefined(members), extends_, implements_);
    };
    var peg$c76 = function (isAbstract, name, extends_, implements_) {
        return new types.Class(name.name, name.title, !!isAbstract, [], extends_, implements_);
    };
    var peg$c77 = "--";
    var peg$c78 = peg$literalExpectation("--", false);
    var peg$c79 = "-";
    var peg$c80 = peg$literalExpectation("-", false);
    var peg$c81 = "..";
    var peg$c82 = peg$literalExpectation("..", false);
    var peg$c83 = ".";
    var peg$c84 = peg$literalExpectation(".", false);
    var peg$c85 = "==";
    var peg$c86 = peg$literalExpectation("==", false);
    var peg$c87 = "__";
    var peg$c88 = peg$literalExpectation("__", false);
    var peg$c89 = "_";
    var peg$c90 = peg$literalExpectation("_", false);
    var peg$c91 = "static ";
    var peg$c92 = peg$literalExpectation("static ", true);
    var peg$c93 = function (isStatic, accessor, type, name, _arguments) {
        return new types.Method(name, !!isStatic, accessor, type, extractText(_arguments));
    };
    var peg$c94 = function (isStatic, accessor, name, _arguments) {
        return new types.Method(name, !!isStatic, accessor, undefined, extractText(_arguments));
    };
    var peg$c95 = function (isStatic, accessor, type, name) {
        return new types.MemberVariable(name, !!isStatic, accessor, type);
    };
    var peg$c96 = function (isStatic, accessor, name) {
        return new types.MemberVariable(name, !!isStatic, accessor);
    };
    var peg$c97 = "interface ";
    var peg$c98 = peg$literalExpectation("interface ", true);
    var peg$c99 = function (name, extends_, implements_, members) {
        return new types.Interface(name.name, name.title, removeUndefined(members), extends_, implements_);
    };
    var peg$c100 = function (name, extends_, implements_) {
        return new types.Interface(name.name, name.title, [], extends_, implements_);
    };
    var peg$c101 = "enum ";
    var peg$c102 = peg$literalExpectation("enum ", true);
    var peg$c103 = function (name, extends_, implements_, members) {
        return new types.Enum(name.name, name.title, removeUndefined(members), extends_, implements_);
    };
    var peg$c104 = function (name, extends_, implements_) {
        return new types.Enum(name.name, name.title, [], extends_, implements_);
    };
    var peg$c105 = "component ";
    var peg$c106 = peg$literalExpectation("component ", true);
    var peg$c107 = function (name) {
        return new types.Component(name.name, name.title);
    };
    var peg$c108 = "[";
    var peg$c109 = peg$literalExpectation("[", false);
    var peg$c110 = "]";
    var peg$c111 = peg$literalExpectation("]", false);
    var peg$c112 = "as";
    var peg$c113 = peg$literalExpectation("as", false);
    var peg$c114 = function (title, name) {
        return {
            name: name,
            title: extractText(title),
        };
    };
    var peg$c115 = function (name) {
        name = extractText(name);
        return {
            name: name,
            title: name,
        };
    };
    var peg$c116 = "usecase ";
    var peg$c117 = peg$literalExpectation("usecase ", true);
    var peg$c118 = function (name) {
        return new types.UseCase(name.name, name.title);
    };
    var peg$c119 = function (left, leftCardinality, leftArrowHead, leftArrowBody, hidden, rightArrowBody, rightArrowHead, rightCardinality, right, label) {
        return new types.Relationship(left.name, right.name, left.type, right.type, leftArrowHead, rightArrowHead, leftArrowBody, rightArrowBody, leftCardinality, rightCardinality, label, !!hidden);
    };
    var peg$c120 = function (left, leftCardinality, leftArrowHead, arrowBody, rightArrowHead, rightCardinality, right, label) {
        return new types.Relationship(left.name, right.name, left.type, right.type, leftArrowHead, rightArrowHead, arrowBody, arrowBody, leftCardinality, rightCardinality, label, false);
    };
    var peg$c121 = "<|";
    var peg$c122 = peg$literalExpectation("<|", false);
    var peg$c123 = "|>";
    var peg$c124 = peg$literalExpectation("|>", false);
    var peg$c125 = "*";
    var peg$c126 = peg$literalExpectation("*", false);
    var peg$c127 = "o";
    var peg$c128 = peg$literalExpectation("o", false);
    var peg$c129 = "<";
    var peg$c130 = peg$literalExpectation("<", false);
    var peg$c131 = ">";
    var peg$c132 = peg$literalExpectation(">", false);
    var peg$c133 = "#";
    var peg$c134 = peg$literalExpectation("#", false);
    var peg$c135 = "x";
    var peg$c136 = peg$literalExpectation("x", false);
    var peg$c137 = "+";
    var peg$c138 = peg$literalExpectation("+", false);
    var peg$c139 = "^";
    var peg$c140 = peg$literalExpectation("^", false);
    var peg$c141 = "()";
    var peg$c142 = peg$literalExpectation("()", false);
    var peg$c143 = /^[\-]/;
    var peg$c144 = peg$classExpectation(["-"], false, false);
    var peg$c145 = function () {
        return '-';
    };
    var peg$c146 = /^[.]/;
    var peg$c147 = peg$classExpectation(["."], false, false);
    var peg$c148 = function () {
        return '.';
    };
    var peg$c149 = function (label) {
        return extractText(label);
    };
    var peg$c150 = "[hidden]";
    var peg$c151 = peg$literalExpectation("[hidden]", false);
    var peg$c152 = "extends ";
    var peg$c153 = peg$literalExpectation("extends ", true);
    var peg$c154 = function (parents) {
        return parents;
    };
    var peg$c155 = "implements ";
    var peg$c156 = peg$literalExpectation("implements ", true);
    var peg$c157 = "digraph";
    var peg$c158 = peg$literalExpectation("digraph", true);
    var peg$c159 = "state";
    var peg$c160 = peg$literalExpectation("state", true);
    var peg$c161 = function (element) {
        return {
            name: element.name,
            type: 'Component',
        };
    };
    var peg$c162 = function (element) {
        return {
            name: element.name,
            type: 'UseCase',
        };
    };
    var peg$c163 = function (name) {
        return {
            name: name,
            type: 'Unknown',
        };
    };
    var peg$c164 = peg$literalExpectation("as ", true);
    var peg$c165 = function (title, name) {
        return {
            name: name,
            title: title,
        };
    };
    var peg$c166 = function (name, title) {
        return {
            name: name,
            title: title,
        };
    };
    var peg$c167 = function (name) {
        return {
            name: name,
            title: name,
        };
    };
    var peg$c168 = function (name) {
        return {
            name: name.name,
            title: name.title,
        };
    };
    var peg$c169 = "\"";
    var peg$c170 = peg$literalExpectation("\"", false);
    var peg$c171 = function (string) {
        return extractText(string);
    };
    var peg$c172 = /^[A-Za-z0-9._]/;
    var peg$c173 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], ".", "_"], false, false);
    var peg$c174 = function (name) {
        return name.join('');
    };
    var peg$c175 = function (nameListItems, lastNameListItem) {
        return removeUndefined(nameListItems.concat(lastNameListItem));
    };
    var peg$c176 = ",";
    var peg$c177 = peg$literalExpectation(",", false);
    var peg$c178 = function (name) {
        return name;
    };
    var peg$c179 = "<<";
    var peg$c180 = peg$literalExpectation("<<", false);
    var peg$c181 = ">>";
    var peg$c182 = peg$literalExpectation(">>", false);
    var peg$c183 = /^[\-#~+]/;
    var peg$c184 = peg$classExpectation(["-", "#", "~", "+"], false, false);
    var peg$c185 = /^[#A-Za-z0-9]/;
    var peg$c186 = peg$classExpectation(["#", ["A", "Z"], ["a", "z"], ["0", "9"]], false, false);
    var peg$c187 = function (color) {
        return color.join('');
    };
    var peg$c188 = "left";
    var peg$c189 = peg$literalExpectation("left", true);
    var peg$c190 = "right";
    var peg$c191 = peg$literalExpectation("right", true);
    var peg$c192 = "up";
    var peg$c193 = peg$literalExpectation("up", true);
    var peg$c194 = "down";
    var peg$c195 = peg$literalExpectation("down", true);
    var peg$c196 = "top";
    var peg$c197 = peg$literalExpectation("top", true);
    var peg$c198 = "bottom";
    var peg$c199 = peg$literalExpectation("bottom", true);
    var peg$c200 = /^[ \t]/;
    var peg$c201 = peg$classExpectation([" ", "\t"], false, false);
    var peg$c202 = "\n";
    var peg$c203 = peg$literalExpectation("\n", false);
    var peg$c204 = "\r\n";
    var peg$c205 = peg$literalExpectation("\r\n", false);
    var peg$currPos = 0;
    var peg$savedPos = 0;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = 0;
    var peg$maxFailExpected = [];
    var peg$silentFails = 0;
    var peg$tracer = "tracer" in options ? options.tracer : new DefaultTracer();
    var peg$result;
    if (options.startRule !== undefined) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }
    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }
    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }
    function expected(description, location1) {
        location1 = location1 !== undefined
            ? location1
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);
    }
    function error(message, location1) {
        location1 = location1 !== undefined
            ? location1
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location1);
    }
    function peg$literalExpectation(text1, ignoreCase) {
        return { type: "literal", text: text1, ignoreCase: ignoreCase };
    }
    function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }
    function peg$anyExpectation() {
        return { type: "any" };
    }
    function peg$endExpectation() {
        return { type: "end" };
    }
    function peg$otherExpectation(description) {
        return { type: "other", description: description };
    }
    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
            return details;
        }
        else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
                p--;
            }
            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column
            };
            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                }
                else {
                    details.column++;
                }
                p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
        }
    }
    function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);
        return {
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        };
    }
    function peg$fail(expected1) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }
        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected1);
    }
    function peg$buildSimpleError(message, location1) {
        return new SyntaxError(message, [], "", location1);
    }
    function peg$buildStructuredError(expected1, found, location1) {
        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);
    }
    function peg$parsePlantUMLFile() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "PlantUMLFile",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parseDiagrams();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c0(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$currPos;
            s3 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 9) === peg$c1) {
                s4 = peg$c1;
                peg$currPos += 9;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c2);
                }
            }
            peg$silentFails--;
            if (s4 === peg$FAILED) {
                s3 = undefined;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c3);
                    }
                }
                if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$currPos;
                s3 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 9) === peg$c1) {
                    s4 = peg$c1;
                    peg$currPos += 9;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c2);
                    }
                }
                peg$silentFails--;
                if (s4 === peg$FAILED) {
                    s3 = undefined;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c3);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s3 = [s3, s4];
                        s2 = s3;
                    }
                    else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c4();
            }
            s0 = s1;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "PlantUMLFile",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "PlantUMLFile",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseDiagrams() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Diagrams",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = [];
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$currPos;
        peg$silentFails++;
        if (input.substr(peg$currPos, 9) === peg$c1) {
            s5 = peg$c1;
            peg$currPos += 9;
        }
        else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c2);
            }
        }
        peg$silentFails--;
        if (s5 === peg$FAILED) {
            s4 = undefined;
        }
        else {
            peg$currPos = s4;
            s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
            if (input.length > peg$currPos) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c3);
                }
            }
            if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s3;
            s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 9) === peg$c1) {
                s5 = peg$c1;
                peg$currPos += 9;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c2);
                }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
                s4 = undefined;
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c3);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
        }
        if (s2 !== peg$FAILED) {
            if (input.substr(peg$currPos, 9) === peg$c1) {
                s3 = peg$c1;
                peg$currPos += 9;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c2);
                }
            }
            if (s3 !== peg$FAILED) {
                s4 = peg$parse_();
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseDiagramId();
                    if (s5 === peg$FAILED) {
                        s5 = null;
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parse_();
                        if (s6 !== peg$FAILED) {
                            s7 = peg$parseNewLine();
                            if (s7 !== peg$FAILED) {
                                s8 = peg$parseUML();
                                if (s8 !== peg$FAILED) {
                                    if (input.substr(peg$currPos, 7) === peg$c5) {
                                        s9 = peg$c5;
                                        peg$currPos += 7;
                                    }
                                    else {
                                        s9 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c6);
                                        }
                                    }
                                    if (s9 !== peg$FAILED) {
                                        s10 = peg$parse_();
                                        if (s10 !== peg$FAILED) {
                                            s11 = peg$parseNewLine();
                                            if (s11 === peg$FAILED) {
                                                s11 = null;
                                            }
                                            if (s11 !== peg$FAILED) {
                                                s12 = [];
                                                s13 = peg$currPos;
                                                s14 = peg$currPos;
                                                peg$silentFails++;
                                                if (input.substr(peg$currPos, 9) === peg$c1) {
                                                    s15 = peg$c1;
                                                    peg$currPos += 9;
                                                }
                                                else {
                                                    s15 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c2);
                                                    }
                                                }
                                                peg$silentFails--;
                                                if (s15 === peg$FAILED) {
                                                    s14 = undefined;
                                                }
                                                else {
                                                    peg$currPos = s14;
                                                    s14 = peg$FAILED;
                                                }
                                                if (s14 !== peg$FAILED) {
                                                    if (input.length > peg$currPos) {
                                                        s15 = input.charAt(peg$currPos);
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s15 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c3);
                                                        }
                                                    }
                                                    if (s15 !== peg$FAILED) {
                                                        s14 = [s14, s15];
                                                        s13 = s14;
                                                    }
                                                    else {
                                                        peg$currPos = s13;
                                                        s13 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s13;
                                                    s13 = peg$FAILED;
                                                }
                                                while (s13 !== peg$FAILED) {
                                                    s12.push(s13);
                                                    s13 = peg$currPos;
                                                    s14 = peg$currPos;
                                                    peg$silentFails++;
                                                    if (input.substr(peg$currPos, 9) === peg$c1) {
                                                        s15 = peg$c1;
                                                        peg$currPos += 9;
                                                    }
                                                    else {
                                                        s15 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c2);
                                                        }
                                                    }
                                                    peg$silentFails--;
                                                    if (s15 === peg$FAILED) {
                                                        s14 = undefined;
                                                    }
                                                    else {
                                                        peg$currPos = s14;
                                                        s14 = peg$FAILED;
                                                    }
                                                    if (s14 !== peg$FAILED) {
                                                        if (input.length > peg$currPos) {
                                                            s15 = input.charAt(peg$currPos);
                                                            peg$currPos++;
                                                        }
                                                        else {
                                                            s15 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c3);
                                                            }
                                                        }
                                                        if (s15 !== peg$FAILED) {
                                                            s14 = [s14, s15];
                                                            s13 = s14;
                                                        }
                                                        else {
                                                            peg$currPos = s13;
                                                            s13 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s13;
                                                        s13 = peg$FAILED;
                                                    }
                                                }
                                                if (s12 !== peg$FAILED) {
                                                    peg$savedPos = s1;
                                                    s2 = peg$c7(s8);
                                                    s1 = s2;
                                                }
                                                else {
                                                    peg$currPos = s1;
                                                    s1 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s1;
                                                s1 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s1;
                                            s1 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s1;
                                        s1 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s1;
                                    s1 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s1;
                                s1 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                s1 = peg$currPos;
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 9) === peg$c1) {
                    s5 = peg$c1;
                    peg$currPos += 9;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c2);
                    }
                }
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                    s4 = undefined;
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c3);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 9) === peg$c1) {
                        s5 = peg$c1;
                        peg$currPos += 9;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c2);
                        }
                    }
                    peg$silentFails--;
                    if (s5 === peg$FAILED) {
                        s4 = undefined;
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c3);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 9) === peg$c1) {
                        s3 = peg$c1;
                        peg$currPos += 9;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c2);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseDiagramId();
                            if (s5 === peg$FAILED) {
                                s5 = null;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parse_();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseNewLine();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parseUML();
                                        if (s8 !== peg$FAILED) {
                                            if (input.substr(peg$currPos, 7) === peg$c5) {
                                                s9 = peg$c5;
                                                peg$currPos += 7;
                                            }
                                            else {
                                                s9 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c6);
                                                }
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parse_();
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parseNewLine();
                                                    if (s11 === peg$FAILED) {
                                                        s11 = null;
                                                    }
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = [];
                                                        s13 = peg$currPos;
                                                        s14 = peg$currPos;
                                                        peg$silentFails++;
                                                        if (input.substr(peg$currPos, 9) === peg$c1) {
                                                            s15 = peg$c1;
                                                            peg$currPos += 9;
                                                        }
                                                        else {
                                                            s15 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c2);
                                                            }
                                                        }
                                                        peg$silentFails--;
                                                        if (s15 === peg$FAILED) {
                                                            s14 = undefined;
                                                        }
                                                        else {
                                                            peg$currPos = s14;
                                                            s14 = peg$FAILED;
                                                        }
                                                        if (s14 !== peg$FAILED) {
                                                            if (input.length > peg$currPos) {
                                                                s15 = input.charAt(peg$currPos);
                                                                peg$currPos++;
                                                            }
                                                            else {
                                                                s15 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c3);
                                                                }
                                                            }
                                                            if (s15 !== peg$FAILED) {
                                                                s14 = [s14, s15];
                                                                s13 = s14;
                                                            }
                                                            else {
                                                                peg$currPos = s13;
                                                                s13 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s13;
                                                            s13 = peg$FAILED;
                                                        }
                                                        while (s13 !== peg$FAILED) {
                                                            s12.push(s13);
                                                            s13 = peg$currPos;
                                                            s14 = peg$currPos;
                                                            peg$silentFails++;
                                                            if (input.substr(peg$currPos, 9) === peg$c1) {
                                                                s15 = peg$c1;
                                                                peg$currPos += 9;
                                                            }
                                                            else {
                                                                s15 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c2);
                                                                }
                                                            }
                                                            peg$silentFails--;
                                                            if (s15 === peg$FAILED) {
                                                                s14 = undefined;
                                                            }
                                                            else {
                                                                peg$currPos = s14;
                                                                s14 = peg$FAILED;
                                                            }
                                                            if (s14 !== peg$FAILED) {
                                                                if (input.length > peg$currPos) {
                                                                    s15 = input.charAt(peg$currPos);
                                                                    peg$currPos++;
                                                                }
                                                                else {
                                                                    s15 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c3);
                                                                    }
                                                                }
                                                                if (s15 !== peg$FAILED) {
                                                                    s14 = [s14, s15];
                                                                    s13 = s14;
                                                                }
                                                                else {
                                                                    peg$currPos = s13;
                                                                    s13 = peg$FAILED;
                                                                }
                                                            }
                                                            else {
                                                                peg$currPos = s13;
                                                                s13 = peg$FAILED;
                                                            }
                                                        }
                                                        if (s12 !== peg$FAILED) {
                                                            peg$savedPos = s1;
                                                            s2 = peg$c7(s8);
                                                            s1 = s2;
                                                        }
                                                        else {
                                                            peg$currPos = s1;
                                                            s1 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s1;
                                                        s1 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s1;
                                                    s1 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s1;
                                                s1 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s1;
                                            s1 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s1;
                                        s1 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s1;
                                    s1 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s1;
                                s1 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            }
        }
        else {
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Diagrams",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Diagrams",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseDiagramId() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "DiagramId",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c8;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c9);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c10) {
                    s3 = peg$c10;
                    peg$currPos += 2;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c11);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                            s5 = peg$c12;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c13);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseName();
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 41) {
                                    s7 = peg$c14;
                                    peg$currPos++;
                                }
                                else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c15);
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s1 = [s1, s2, s3, s4, s5, s6, s7];
                                    s0 = s1;
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "DiagramId",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "DiagramId",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseUML() {
        var startPos = peg$currPos;
        var s0, s1, s2;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "UML",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseUMLElement();
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseUMLElement();
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c16(s1);
        }
        s0 = s1;
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "UML",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "UML",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseUMLElement() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "UMLElement",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$parseComment();
        if (s0 === peg$FAILED) {
            s0 = peg$parseRelationship();
            if (s0 === peg$FAILED) {
                s0 = peg$parseSkinParam();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseTogether();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseGroup();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseNote();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseClass();
                                if (s0 === peg$FAILED) {
                                    s0 = peg$parseInterface();
                                    if (s0 === peg$FAILED) {
                                        s0 = peg$parseEnum();
                                        if (s0 === peg$FAILED) {
                                            s0 = peg$parseComponent();
                                            if (s0 === peg$FAILED) {
                                                s0 = peg$parseUseCase();
                                                if (s0 === peg$FAILED) {
                                                    s0 = peg$parseNotImplementedBlock();
                                                    if (s0 === peg$FAILED) {
                                                        s0 = peg$currPos;
                                                        s1 = peg$currPos;
                                                        s2 = peg$currPos;
                                                        peg$silentFails++;
                                                        s3 = peg$currPos;
                                                        s4 = peg$parse_();
                                                        if (s4 !== peg$FAILED) {
                                                            if (input.substr(peg$currPos, 7) === peg$c5) {
                                                                s5 = peg$c5;
                                                                peg$currPos += 7;
                                                            }
                                                            else {
                                                                s5 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c6);
                                                                }
                                                            }
                                                            if (s5 !== peg$FAILED) {
                                                                s4 = [s4, s5];
                                                                s3 = s4;
                                                            }
                                                            else {
                                                                peg$currPos = s3;
                                                                s3 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s3;
                                                            s3 = peg$FAILED;
                                                        }
                                                        if (s3 === peg$FAILED) {
                                                            s3 = peg$currPos;
                                                            s4 = peg$parse_();
                                                            if (s4 !== peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 125) {
                                                                    s5 = peg$c17;
                                                                    peg$currPos++;
                                                                }
                                                                else {
                                                                    s5 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c18);
                                                                    }
                                                                }
                                                                if (s5 !== peg$FAILED) {
                                                                    s4 = [s4, s5];
                                                                    s3 = s4;
                                                                }
                                                                else {
                                                                    peg$currPos = s3;
                                                                    s3 = peg$FAILED;
                                                                }
                                                            }
                                                            else {
                                                                peg$currPos = s3;
                                                                s3 = peg$FAILED;
                                                            }
                                                            if (s3 === peg$FAILED) {
                                                                s3 = peg$currPos;
                                                                s4 = peg$parse_();
                                                                if (s4 !== peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 8) === peg$c19) {
                                                                        s5 = peg$c19;
                                                                        peg$currPos += 8;
                                                                    }
                                                                    else {
                                                                        s5 = peg$FAILED;
                                                                        if (peg$silentFails === 0) {
                                                                            peg$fail(peg$c20);
                                                                        }
                                                                    }
                                                                    if (s5 !== peg$FAILED) {
                                                                        s4 = [s4, s5];
                                                                        s3 = s4;
                                                                    }
                                                                    else {
                                                                        peg$currPos = s3;
                                                                        s3 = peg$FAILED;
                                                                    }
                                                                }
                                                                else {
                                                                    peg$currPos = s3;
                                                                    s3 = peg$FAILED;
                                                                }
                                                            }
                                                        }
                                                        peg$silentFails--;
                                                        if (s3 === peg$FAILED) {
                                                            s2 = undefined;
                                                        }
                                                        else {
                                                            peg$currPos = s2;
                                                            s2 = peg$FAILED;
                                                        }
                                                        if (s2 !== peg$FAILED) {
                                                            s3 = peg$parseEndLine();
                                                            if (s3 !== peg$FAILED) {
                                                                s2 = [s2, s3];
                                                                s1 = s2;
                                                            }
                                                            else {
                                                                peg$currPos = s1;
                                                                s1 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s1;
                                                            s1 = peg$FAILED;
                                                        }
                                                        if (s1 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c21();
                                                        }
                                                        s0 = s1;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "UMLElement",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "UMLElement",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseComment() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Comment",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
                s2 = peg$c22;
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c23);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$currPos;
                    s6 = peg$currPos;
                    peg$silentFails++;
                    s7 = peg$parseNewLine();
                    peg$silentFails--;
                    if (s7 === peg$FAILED) {
                        s6 = undefined;
                    }
                    else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s7 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c3);
                            }
                        }
                        if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                        }
                        else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$currPos;
                            s6 = peg$currPos;
                            peg$silentFails++;
                            s7 = peg$parseNewLine();
                            peg$silentFails--;
                            if (s7 === peg$FAILED) {
                                s6 = undefined;
                            }
                            else {
                                peg$currPos = s6;
                                s6 = peg$FAILED;
                            }
                            if (s6 !== peg$FAILED) {
                                if (input.length > peg$currPos) {
                                    s7 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                }
                                else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c3);
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                }
                                else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        }
                    }
                    else {
                        s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseEndLine();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c24(s4);
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c25) {
                    s2 = peg$c25;
                    peg$currPos += 2;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c26);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$currPos;
                        s6 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 2) === peg$c27) {
                            s7 = peg$c27;
                            peg$currPos += 2;
                        }
                        else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c28);
                            }
                        }
                        peg$silentFails--;
                        if (s7 === peg$FAILED) {
                            s6 = undefined;
                        }
                        else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                        }
                        if (s6 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s7 = input.charAt(peg$currPos);
                                peg$currPos++;
                            }
                            else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c3);
                                }
                            }
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            }
                            else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$currPos;
                            s6 = peg$currPos;
                            peg$silentFails++;
                            if (input.substr(peg$currPos, 2) === peg$c27) {
                                s7 = peg$c27;
                                peg$currPos += 2;
                            }
                            else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c28);
                                }
                            }
                            peg$silentFails--;
                            if (s7 === peg$FAILED) {
                                s6 = undefined;
                            }
                            else {
                                peg$currPos = s6;
                                s6 = peg$FAILED;
                            }
                            if (s6 !== peg$FAILED) {
                                if (input.length > peg$currPos) {
                                    s7 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                }
                                else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c3);
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                }
                                else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseEndLine();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c24(s4);
                                s0 = s1;
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Comment",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Comment",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseSkinParam() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "SkinParam",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 10).toLowerCase() === peg$c29) {
                s2 = input.substr(peg$currPos, 10);
                peg$currPos += 10;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c30);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseName();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 123) {
                                s6 = peg$c31;
                                peg$currPos++;
                            }
                            else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c32);
                                }
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parse_();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseNewLine();
                                    if (s8 !== peg$FAILED) {
                                        s9 = [];
                                        s10 = peg$parseParam();
                                        while (s10 !== peg$FAILED) {
                                            s9.push(s10);
                                            s10 = peg$parseParam();
                                        }
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parse_();
                                            if (s10 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 125) {
                                                    s11 = peg$c17;
                                                    peg$currPos++;
                                                }
                                                else {
                                                    s11 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c18);
                                                    }
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parseEndLine();
                                                    if (s12 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c33(s4);
                                                        s0 = s1;
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c29) {
                    s2 = input.substr(peg$currPos, 10);
                    peg$currPos += 10;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c30);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseParam();
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c34();
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "SkinParam",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "SkinParam",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseParam() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Param",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseName();
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseColor();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseEndLine();
                        if (s5 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5];
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Param",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Param",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseTogether() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Together",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c35) {
                s2 = input.substr(peg$currPos, 9);
                peg$currPos += 9;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c36);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 123) {
                        s4 = peg$c31;
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c32);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseNewLine();
                            if (s6 !== peg$FAILED) {
                                s7 = [];
                                s8 = peg$parseUMLElement();
                                while (s8 !== peg$FAILED) {
                                    s7.push(s8);
                                    s8 = peg$parseUMLElement();
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 125) {
                                            s9 = peg$c17;
                                            peg$currPos++;
                                        }
                                        else {
                                            s9 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c18);
                                            }
                                        }
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parseEndLine();
                                            if (s10 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c37(s7);
                                                s0 = s1;
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Together",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Together",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseGroup() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Group",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseGroupType();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                    s3 = peg$c38;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c39);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseElementName();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseStereotype();
                                if (s7 === peg$FAILED) {
                                    s7 = null;
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseColor();
                                        if (s9 === peg$FAILED) {
                                            s9 = null;
                                        }
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parse_();
                                            if (s10 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 123) {
                                                    s11 = peg$c31;
                                                    peg$currPos++;
                                                }
                                                else {
                                                    s11 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c32);
                                                    }
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parse_();
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parseNewLine();
                                                        if (s13 !== peg$FAILED) {
                                                            s14 = [];
                                                            s15 = peg$parseUMLElement();
                                                            while (s15 !== peg$FAILED) {
                                                                s14.push(s15);
                                                                s15 = peg$parseUMLElement();
                                                            }
                                                            if (s14 !== peg$FAILED) {
                                                                s15 = peg$parse_();
                                                                if (s15 !== peg$FAILED) {
                                                                    if (input.charCodeAt(peg$currPos) === 125) {
                                                                        s16 = peg$c17;
                                                                        peg$currPos++;
                                                                    }
                                                                    else {
                                                                        s16 = peg$FAILED;
                                                                        if (peg$silentFails === 0) {
                                                                            peg$fail(peg$c18);
                                                                        }
                                                                    }
                                                                    if (s16 !== peg$FAILED) {
                                                                        s17 = peg$parseEndLine();
                                                                        if (s17 !== peg$FAILED) {
                                                                            peg$savedPos = s0;
                                                                            s1 = peg$c40(s2, s5, s14);
                                                                            s0 = s1;
                                                                        }
                                                                        else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    }
                                                                    else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                }
                                                                else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            }
                                                            else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Group",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Group",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseGroupType() {
        var startPos = peg$currPos;
        var s0;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "GroupType",
            location: peg$computeLocation(startPos, startPos)
        });
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c41) {
            s0 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c42);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c43) {
                s0 = input.substr(peg$currPos, 9);
                peg$currPos += 9;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c44);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c45) {
                    s0 = input.substr(peg$currPos, 4);
                    peg$currPos += 4;
                }
                else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c46);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c47) {
                        s0 = input.substr(peg$currPos, 6);
                        peg$currPos += 6;
                    }
                    else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c48);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c49) {
                            s0 = input.substr(peg$currPos, 5);
                            peg$currPos += 5;
                        }
                        else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c50);
                            }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c51) {
                                s0 = input.substr(peg$currPos, 5);
                                peg$currPos += 5;
                            }
                            else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c52);
                                }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.substr(peg$currPos, 8).toLowerCase() === peg$c53) {
                                    s0 = input.substr(peg$currPos, 8);
                                    peg$currPos += 8;
                                }
                                else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c54);
                                    }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c55) {
                                        s0 = input.substr(peg$currPos, 9);
                                        peg$currPos += 9;
                                    }
                                    else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c56);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "GroupType",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "GroupType",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseNote() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Note",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c57) {
                s2 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c58);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseDirection();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseNoteOf();
                            if (s6 === peg$FAILED) {
                                s6 = null;
                            }
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 58) {
                                    s7 = peg$c59;
                                    peg$currPos++;
                                }
                                else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c60);
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        s9 = [];
                                        s10 = peg$currPos;
                                        s11 = peg$currPos;
                                        peg$silentFails++;
                                        s12 = peg$parseNewLine();
                                        peg$silentFails--;
                                        if (s12 === peg$FAILED) {
                                            s11 = undefined;
                                        }
                                        else {
                                            peg$currPos = s11;
                                            s11 = peg$FAILED;
                                        }
                                        if (s11 !== peg$FAILED) {
                                            if (input.length > peg$currPos) {
                                                s12 = input.charAt(peg$currPos);
                                                peg$currPos++;
                                            }
                                            else {
                                                s12 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c3);
                                                }
                                            }
                                            if (s12 !== peg$FAILED) {
                                                s11 = [s11, s12];
                                                s10 = s11;
                                            }
                                            else {
                                                peg$currPos = s10;
                                                s10 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s10;
                                            s10 = peg$FAILED;
                                        }
                                        if (s10 !== peg$FAILED) {
                                            while (s10 !== peg$FAILED) {
                                                s9.push(s10);
                                                s10 = peg$currPos;
                                                s11 = peg$currPos;
                                                peg$silentFails++;
                                                s12 = peg$parseNewLine();
                                                peg$silentFails--;
                                                if (s12 === peg$FAILED) {
                                                    s11 = undefined;
                                                }
                                                else {
                                                    peg$currPos = s11;
                                                    s11 = peg$FAILED;
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    if (input.length > peg$currPos) {
                                                        s12 = input.charAt(peg$currPos);
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s12 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c3);
                                                        }
                                                    }
                                                    if (s12 !== peg$FAILED) {
                                                        s11 = [s11, s12];
                                                        s10 = s11;
                                                    }
                                                    else {
                                                        peg$currPos = s10;
                                                        s10 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s10;
                                                    s10 = peg$FAILED;
                                                }
                                            }
                                        }
                                        else {
                                            s9 = peg$FAILED;
                                        }
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parseEndLine();
                                            if (s10 !== peg$FAILED) {
                                                peg$savedPos = s0;
                                                s1 = peg$c61(s6, s9);
                                                s0 = s1;
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c57) {
                    s2 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c58);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseDirection();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseNoteOf();
                                if (s6 === peg$FAILED) {
                                    s6 = null;
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parse_();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parseNewLine();
                                        if (s8 !== peg$FAILED) {
                                            s9 = [];
                                            s10 = peg$currPos;
                                            s11 = peg$currPos;
                                            peg$silentFails++;
                                            s12 = peg$currPos;
                                            s13 = peg$parse_();
                                            if (s13 !== peg$FAILED) {
                                                if (input.substr(peg$currPos, 8) === peg$c19) {
                                                    s14 = peg$c19;
                                                    peg$currPos += 8;
                                                }
                                                else {
                                                    s14 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c20);
                                                    }
                                                }
                                                if (s14 !== peg$FAILED) {
                                                    s15 = peg$parseNewLine();
                                                    if (s15 !== peg$FAILED) {
                                                        s13 = [s13, s14, s15];
                                                        s12 = s13;
                                                    }
                                                    else {
                                                        peg$currPos = s12;
                                                        s12 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s12;
                                                    s12 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s12;
                                                s12 = peg$FAILED;
                                            }
                                            peg$silentFails--;
                                            if (s12 === peg$FAILED) {
                                                s11 = undefined;
                                            }
                                            else {
                                                peg$currPos = s11;
                                                s11 = peg$FAILED;
                                            }
                                            if (s11 !== peg$FAILED) {
                                                if (input.length > peg$currPos) {
                                                    s12 = input.charAt(peg$currPos);
                                                    peg$currPos++;
                                                }
                                                else {
                                                    s12 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c3);
                                                    }
                                                }
                                                if (s12 !== peg$FAILED) {
                                                    s11 = [s11, s12];
                                                    s10 = s11;
                                                }
                                                else {
                                                    peg$currPos = s10;
                                                    s10 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s10;
                                                s10 = peg$FAILED;
                                            }
                                            if (s10 !== peg$FAILED) {
                                                while (s10 !== peg$FAILED) {
                                                    s9.push(s10);
                                                    s10 = peg$currPos;
                                                    s11 = peg$currPos;
                                                    peg$silentFails++;
                                                    s12 = peg$currPos;
                                                    s13 = peg$parse_();
                                                    if (s13 !== peg$FAILED) {
                                                        if (input.substr(peg$currPos, 8) === peg$c19) {
                                                            s14 = peg$c19;
                                                            peg$currPos += 8;
                                                        }
                                                        else {
                                                            s14 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c20);
                                                            }
                                                        }
                                                        if (s14 !== peg$FAILED) {
                                                            s15 = peg$parseNewLine();
                                                            if (s15 !== peg$FAILED) {
                                                                s13 = [s13, s14, s15];
                                                                s12 = s13;
                                                            }
                                                            else {
                                                                peg$currPos = s12;
                                                                s12 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s12;
                                                            s12 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s12;
                                                        s12 = peg$FAILED;
                                                    }
                                                    peg$silentFails--;
                                                    if (s12 === peg$FAILED) {
                                                        s11 = undefined;
                                                    }
                                                    else {
                                                        peg$currPos = s11;
                                                        s11 = peg$FAILED;
                                                    }
                                                    if (s11 !== peg$FAILED) {
                                                        if (input.length > peg$currPos) {
                                                            s12 = input.charAt(peg$currPos);
                                                            peg$currPos++;
                                                        }
                                                        else {
                                                            s12 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c3);
                                                            }
                                                        }
                                                        if (s12 !== peg$FAILED) {
                                                            s11 = [s11, s12];
                                                            s10 = s11;
                                                        }
                                                        else {
                                                            peg$currPos = s10;
                                                            s10 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s10;
                                                        s10 = peg$FAILED;
                                                    }
                                                }
                                            }
                                            else {
                                                s9 = peg$FAILED;
                                            }
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parseEndLine();
                                                if (s10 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c61(s6, s9);
                                                    s0 = s1;
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parse_();
                if (s1 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c57) {
                        s2 = input.substr(peg$currPos, 5);
                        peg$currPos += 5;
                    }
                    else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c58);
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parse_();
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parseDirection();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parse_();
                                if (s5 !== peg$FAILED) {
                                    s6 = peg$parseNoteOf();
                                    if (s6 === peg$FAILED) {
                                        s6 = null;
                                    }
                                    if (s6 !== peg$FAILED) {
                                        s7 = peg$parse_();
                                        if (s7 !== peg$FAILED) {
                                            s8 = peg$parseNewLine();
                                            if (s8 !== peg$FAILED) {
                                                s9 = [];
                                                s10 = peg$currPos;
                                                s11 = peg$currPos;
                                                peg$silentFails++;
                                                s12 = peg$currPos;
                                                s13 = peg$parse_();
                                                if (s13 !== peg$FAILED) {
                                                    if (input.substr(peg$currPos, 8) === peg$c19) {
                                                        s14 = peg$c19;
                                                        peg$currPos += 8;
                                                    }
                                                    else {
                                                        s14 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c20);
                                                        }
                                                    }
                                                    if (s14 !== peg$FAILED) {
                                                        s15 = peg$parseNewLine();
                                                        if (s15 !== peg$FAILED) {
                                                            s13 = [s13, s14, s15];
                                                            s12 = s13;
                                                        }
                                                        else {
                                                            peg$currPos = s12;
                                                            s12 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s12;
                                                        s12 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s12;
                                                    s12 = peg$FAILED;
                                                }
                                                peg$silentFails--;
                                                if (s12 === peg$FAILED) {
                                                    s11 = undefined;
                                                }
                                                else {
                                                    peg$currPos = s11;
                                                    s11 = peg$FAILED;
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    if (input.length > peg$currPos) {
                                                        s12 = input.charAt(peg$currPos);
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s12 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c3);
                                                        }
                                                    }
                                                    if (s12 !== peg$FAILED) {
                                                        s11 = [s11, s12];
                                                        s10 = s11;
                                                    }
                                                    else {
                                                        peg$currPos = s10;
                                                        s10 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s10;
                                                    s10 = peg$FAILED;
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    while (s10 !== peg$FAILED) {
                                                        s9.push(s10);
                                                        s10 = peg$currPos;
                                                        s11 = peg$currPos;
                                                        peg$silentFails++;
                                                        s12 = peg$currPos;
                                                        s13 = peg$parse_();
                                                        if (s13 !== peg$FAILED) {
                                                            if (input.substr(peg$currPos, 8) === peg$c19) {
                                                                s14 = peg$c19;
                                                                peg$currPos += 8;
                                                            }
                                                            else {
                                                                s14 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c20);
                                                                }
                                                            }
                                                            if (s14 !== peg$FAILED) {
                                                                s15 = peg$parseNewLine();
                                                                if (s15 !== peg$FAILED) {
                                                                    s13 = [s13, s14, s15];
                                                                    s12 = s13;
                                                                }
                                                                else {
                                                                    peg$currPos = s12;
                                                                    s12 = peg$FAILED;
                                                                }
                                                            }
                                                            else {
                                                                peg$currPos = s12;
                                                                s12 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s12;
                                                            s12 = peg$FAILED;
                                                        }
                                                        peg$silentFails--;
                                                        if (s12 === peg$FAILED) {
                                                            s11 = undefined;
                                                        }
                                                        else {
                                                            peg$currPos = s11;
                                                            s11 = peg$FAILED;
                                                        }
                                                        if (s11 !== peg$FAILED) {
                                                            if (input.length > peg$currPos) {
                                                                s12 = input.charAt(peg$currPos);
                                                                peg$currPos++;
                                                            }
                                                            else {
                                                                s12 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c3);
                                                                }
                                                            }
                                                            if (s12 !== peg$FAILED) {
                                                                s11 = [s11, s12];
                                                                s10 = s11;
                                                            }
                                                            else {
                                                                peg$currPos = s10;
                                                                s10 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s10;
                                                            s10 = peg$FAILED;
                                                        }
                                                    }
                                                }
                                                else {
                                                    s9 = peg$FAILED;
                                                }
                                                if (s9 !== peg$FAILED) {
                                                    s10 = peg$parseEndLine();
                                                    if (s10 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c61(s6, s9);
                                                        s0 = s1;
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parse_();
                    if (s1 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 5).toLowerCase() === peg$c57) {
                            s2 = input.substr(peg$currPos, 5);
                            peg$currPos += 5;
                        }
                        else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c58);
                            }
                        }
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parse_();
                            if (s3 !== peg$FAILED) {
                                s4 = peg$parseQuotedString();
                                if (s4 !== peg$FAILED) {
                                    s5 = peg$parse_();
                                    if (s5 !== peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c62) {
                                            s6 = peg$c62;
                                            peg$currPos += 3;
                                        }
                                        else {
                                            s6 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c63);
                                            }
                                        }
                                        if (s6 !== peg$FAILED) {
                                            s7 = peg$parseName();
                                            if (s7 !== peg$FAILED) {
                                                s8 = peg$parseEndLine();
                                                if (s8 !== peg$FAILED) {
                                                    peg$savedPos = s0;
                                                    s1 = peg$c64(s4);
                                                    s0 = s1;
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Note",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Note",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseNoteOf() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "NoteOf",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c65) {
            s1 = input.substr(peg$currPos, 3);
            peg$currPos += 3;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c66);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseElementReference();
                if (s3 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c67) {
                        s4 = input.substr(peg$currPos, 2);
                        peg$currPos += 2;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c68);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseMemberReference();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c69(s3, s5);
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c65) {
                s1 = input.substr(peg$currPos, 3);
                peg$currPos += 3;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c66);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseElementReference();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c70(s3);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "NoteOf",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "NoteOf",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseClass() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Class",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {
                s2 = input.substr(peg$currPos, 9);
                peg$currPos += 9;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c72);
                }
            }
            if (s2 === peg$FAILED) {
                s2 = null;
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 6) === peg$c73) {
                        s4 = peg$c73;
                        peg$currPos += 6;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c74);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseElementName();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parse_();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseDecorators();
                                    if (s8 === peg$FAILED) {
                                        s8 = null;
                                    }
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parse_();
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parseExtends();
                                            if (s10 === peg$FAILED) {
                                                s10 = null;
                                            }
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parse_();
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parseImplements();
                                                    if (s12 === peg$FAILED) {
                                                        s12 = null;
                                                    }
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parse_();
                                                        if (s13 !== peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 123) {
                                                                s14 = peg$c31;
                                                                peg$currPos++;
                                                            }
                                                            else {
                                                                s14 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c32);
                                                                }
                                                            }
                                                            if (s14 !== peg$FAILED) {
                                                                s15 = peg$parse_();
                                                                if (s15 !== peg$FAILED) {
                                                                    s16 = peg$parseNewLine();
                                                                    if (s16 !== peg$FAILED) {
                                                                        s17 = [];
                                                                        s18 = peg$parseMember();
                                                                        while (s18 !== peg$FAILED) {
                                                                            s17.push(s18);
                                                                            s18 = peg$parseMember();
                                                                        }
                                                                        if (s17 !== peg$FAILED) {
                                                                            s18 = peg$parse_();
                                                                            if (s18 !== peg$FAILED) {
                                                                                if (input.charCodeAt(peg$currPos) === 125) {
                                                                                    s19 = peg$c17;
                                                                                    peg$currPos++;
                                                                                }
                                                                                else {
                                                                                    s19 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) {
                                                                                        peg$fail(peg$c18);
                                                                                    }
                                                                                }
                                                                                if (s19 !== peg$FAILED) {
                                                                                    s20 = peg$parseEndLine();
                                                                                    if (s20 !== peg$FAILED) {
                                                                                        peg$savedPos = s0;
                                                                                        s1 = peg$c75(s2, s6, s10, s12, s17);
                                                                                        s0 = s1;
                                                                                    }
                                                                                    else {
                                                                                        peg$currPos = s0;
                                                                                        s0 = peg$FAILED;
                                                                                    }
                                                                                }
                                                                                else {
                                                                                    peg$currPos = s0;
                                                                                    s0 = peg$FAILED;
                                                                                }
                                                                            }
                                                                            else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                            }
                                                                        }
                                                                        else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    }
                                                                    else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                }
                                                                else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            }
                                                            else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {
                    s2 = input.substr(peg$currPos, 9);
                    peg$currPos += 9;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c72);
                    }
                }
                if (s2 === peg$FAILED) {
                    s2 = null;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 6) === peg$c73) {
                            s4 = peg$c73;
                            peg$currPos += 6;
                        }
                        else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c74);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseElementName();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parse_();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parseDecorators();
                                        if (s8 === peg$FAILED) {
                                            s8 = null;
                                        }
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parse_();
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parseExtends();
                                                if (s10 === peg$FAILED) {
                                                    s10 = null;
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parse_();
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parseImplements();
                                                        if (s12 === peg$FAILED) {
                                                            s12 = null;
                                                        }
                                                        if (s12 !== peg$FAILED) {
                                                            s13 = peg$parse_();
                                                            if (s13 !== peg$FAILED) {
                                                                s14 = peg$parseEndLine();
                                                                if (s14 !== peg$FAILED) {
                                                                    peg$savedPos = s0;
                                                                    s1 = peg$c76(s2, s6, s10, s12);
                                                                    s0 = s1;
                                                                }
                                                                else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            }
                                                            else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Class",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Class",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseMember() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Member",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$parseSeparatorLine();
        if (s0 === peg$FAILED) {
            s0 = peg$parseMethod();
            if (s0 === peg$FAILED) {
                s0 = peg$parseMemberVariable();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$currPos;
                    s2 = peg$currPos;
                    peg$silentFails++;
                    s3 = peg$currPos;
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 125) {
                            s5 = peg$c17;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c18);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                    peg$silentFails--;
                    if (s3 === peg$FAILED) {
                        s2 = undefined;
                    }
                    else {
                        peg$currPos = s2;
                        s2 = peg$FAILED;
                    }
                    if (s2 !== peg$FAILED) {
                        s3 = peg$parseEndLine();
                        if (s3 !== peg$FAILED) {
                            s2 = [s2, s3];
                            s1 = s2;
                        }
                        else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s1;
                        s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c21();
                    }
                    s0 = s1;
                }
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Member",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Member",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseSeparatorLine() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "SeparatorLine",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseSeparator();
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$currPos;
                    s6 = peg$currPos;
                    peg$silentFails++;
                    s7 = peg$parseSeparator();
                    if (s7 === peg$FAILED) {
                        s7 = peg$parseNewLine();
                    }
                    peg$silentFails--;
                    if (s7 === peg$FAILED) {
                        s6 = undefined;
                    }
                    else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s7 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c3);
                            }
                        }
                        if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                        }
                        else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                    }
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$currPos;
                        s6 = peg$currPos;
                        peg$silentFails++;
                        s7 = peg$parseSeparator();
                        if (s7 === peg$FAILED) {
                            s7 = peg$parseNewLine();
                        }
                        peg$silentFails--;
                        if (s7 === peg$FAILED) {
                            s6 = undefined;
                        }
                        else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                        }
                        if (s6 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s7 = input.charAt(peg$currPos);
                                peg$currPos++;
                            }
                            else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c3);
                                }
                            }
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            }
                            else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseSeparator();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseEndLine();
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c21();
                                s0 = s1;
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseSeparator();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseEndLine();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c21();
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "SeparatorLine",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "SeparatorLine",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseSeparator() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Separator",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c77) {
            s1 = peg$c77;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c78);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            if (input.charCodeAt(peg$currPos) === 45) {
                s3 = peg$c79;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c80);
                }
            }
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                if (input.charCodeAt(peg$currPos) === 45) {
                    s3 = peg$c79;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c80);
                    }
                }
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c81) {
                s1 = peg$c81;
                peg$currPos += 2;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c82);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (input.charCodeAt(peg$currPos) === 46) {
                    s3 = peg$c83;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c84);
                    }
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    if (input.charCodeAt(peg$currPos) === 46) {
                        s3 = peg$c83;
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c84);
                        }
                    }
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c85) {
                    s1 = peg$c85;
                    peg$currPos += 2;
                }
                else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c86);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s3 = peg$c12;
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c13);
                        }
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (input.charCodeAt(peg$currPos) === 61) {
                            s3 = peg$c12;
                            peg$currPos++;
                        }
                        else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c13);
                            }
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        s1 = [s1, s2];
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.substr(peg$currPos, 2) === peg$c87) {
                        s1 = peg$c87;
                        peg$currPos += 2;
                    }
                    else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c88);
                        }
                    }
                    if (s1 !== peg$FAILED) {
                        s2 = [];
                        if (input.charCodeAt(peg$currPos) === 95) {
                            s3 = peg$c89;
                            peg$currPos++;
                        }
                        else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c90);
                            }
                        }
                        while (s3 !== peg$FAILED) {
                            s2.push(s3);
                            if (input.charCodeAt(peg$currPos) === 95) {
                                s3 = peg$c89;
                                peg$currPos++;
                            }
                            else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c90);
                                }
                            }
                        }
                        if (s2 !== peg$FAILED) {
                            s1 = [s1, s2];
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Separator",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Separator",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseMethod() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Method",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c91) {
                s2 = input.substr(peg$currPos, 7);
                peg$currPos += 7;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c92);
                }
            }
            if (s2 === peg$FAILED) {
                s2 = null;
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseAccessor();
                    if (s4 === peg$FAILED) {
                        s4 = null;
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseName();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parse_();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseName();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parse_();
                                        if (s9 !== peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 40) {
                                                s10 = peg$c8;
                                                peg$currPos++;
                                            }
                                            else {
                                                s10 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c9);
                                                }
                                            }
                                            if (s10 !== peg$FAILED) {
                                                s11 = [];
                                                s12 = peg$currPos;
                                                s13 = peg$currPos;
                                                peg$silentFails++;
                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                    s14 = peg$c14;
                                                    peg$currPos++;
                                                }
                                                else {
                                                    s14 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c15);
                                                    }
                                                }
                                                peg$silentFails--;
                                                if (s14 === peg$FAILED) {
                                                    s13 = undefined;
                                                }
                                                else {
                                                    peg$currPos = s13;
                                                    s13 = peg$FAILED;
                                                }
                                                if (s13 !== peg$FAILED) {
                                                    if (input.length > peg$currPos) {
                                                        s14 = input.charAt(peg$currPos);
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s14 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c3);
                                                        }
                                                    }
                                                    if (s14 !== peg$FAILED) {
                                                        s13 = [s13, s14];
                                                        s12 = s13;
                                                    }
                                                    else {
                                                        peg$currPos = s12;
                                                        s12 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s12;
                                                    s12 = peg$FAILED;
                                                }
                                                while (s12 !== peg$FAILED) {
                                                    s11.push(s12);
                                                    s12 = peg$currPos;
                                                    s13 = peg$currPos;
                                                    peg$silentFails++;
                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                        s14 = peg$c14;
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s14 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c15);
                                                        }
                                                    }
                                                    peg$silentFails--;
                                                    if (s14 === peg$FAILED) {
                                                        s13 = undefined;
                                                    }
                                                    else {
                                                        peg$currPos = s13;
                                                        s13 = peg$FAILED;
                                                    }
                                                    if (s13 !== peg$FAILED) {
                                                        if (input.length > peg$currPos) {
                                                            s14 = input.charAt(peg$currPos);
                                                            peg$currPos++;
                                                        }
                                                        else {
                                                            s14 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c3);
                                                            }
                                                        }
                                                        if (s14 !== peg$FAILED) {
                                                            s13 = [s13, s14];
                                                            s12 = s13;
                                                        }
                                                        else {
                                                            peg$currPos = s12;
                                                            s12 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s12;
                                                        s12 = peg$FAILED;
                                                    }
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 41) {
                                                        s12 = peg$c14;
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s12 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c15);
                                                        }
                                                    }
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parseEndLine();
                                                        if (s13 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c93(s2, s4, s6, s8, s11);
                                                            s0 = s1;
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c91) {
                    s2 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c92);
                    }
                }
                if (s2 === peg$FAILED) {
                    s2 = null;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseAccessor();
                        if (s4 === peg$FAILED) {
                            s4 = null;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseName();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parse_();
                                    if (s7 !== peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 40) {
                                            s8 = peg$c8;
                                            peg$currPos++;
                                        }
                                        else {
                                            s8 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c9);
                                            }
                                        }
                                        if (s8 !== peg$FAILED) {
                                            s9 = [];
                                            s10 = peg$currPos;
                                            s11 = peg$currPos;
                                            peg$silentFails++;
                                            if (input.charCodeAt(peg$currPos) === 41) {
                                                s12 = peg$c14;
                                                peg$currPos++;
                                            }
                                            else {
                                                s12 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c15);
                                                }
                                            }
                                            peg$silentFails--;
                                            if (s12 === peg$FAILED) {
                                                s11 = undefined;
                                            }
                                            else {
                                                peg$currPos = s11;
                                                s11 = peg$FAILED;
                                            }
                                            if (s11 !== peg$FAILED) {
                                                if (input.length > peg$currPos) {
                                                    s12 = input.charAt(peg$currPos);
                                                    peg$currPos++;
                                                }
                                                else {
                                                    s12 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c3);
                                                    }
                                                }
                                                if (s12 !== peg$FAILED) {
                                                    s11 = [s11, s12];
                                                    s10 = s11;
                                                }
                                                else {
                                                    peg$currPos = s10;
                                                    s10 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s10;
                                                s10 = peg$FAILED;
                                            }
                                            while (s10 !== peg$FAILED) {
                                                s9.push(s10);
                                                s10 = peg$currPos;
                                                s11 = peg$currPos;
                                                peg$silentFails++;
                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                    s12 = peg$c14;
                                                    peg$currPos++;
                                                }
                                                else {
                                                    s12 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c15);
                                                    }
                                                }
                                                peg$silentFails--;
                                                if (s12 === peg$FAILED) {
                                                    s11 = undefined;
                                                }
                                                else {
                                                    peg$currPos = s11;
                                                    s11 = peg$FAILED;
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    if (input.length > peg$currPos) {
                                                        s12 = input.charAt(peg$currPos);
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s12 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c3);
                                                        }
                                                    }
                                                    if (s12 !== peg$FAILED) {
                                                        s11 = [s11, s12];
                                                        s10 = s11;
                                                    }
                                                    else {
                                                        peg$currPos = s10;
                                                        s10 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s10;
                                                    s10 = peg$FAILED;
                                                }
                                            }
                                            if (s9 !== peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                    s10 = peg$c14;
                                                    peg$currPos++;
                                                }
                                                else {
                                                    s10 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c15);
                                                    }
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parseEndLine();
                                                    if (s11 !== peg$FAILED) {
                                                        peg$savedPos = s0;
                                                        s1 = peg$c94(s2, s4, s6, s9);
                                                        s0 = s1;
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Method",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Method",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseMemberVariable() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "MemberVariable",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 7).toLowerCase() === peg$c91) {
                s2 = input.substr(peg$currPos, 7);
                peg$currPos += 7;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c92);
                }
            }
            if (s2 === peg$FAILED) {
                s2 = null;
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseAccessor();
                    if (s4 === peg$FAILED) {
                        s4 = null;
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseName();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parse_();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseName();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseEndLine();
                                        if (s9 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c95(s2, s4, s6, s8);
                                            s0 = s1;
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c91) {
                    s2 = input.substr(peg$currPos, 7);
                    peg$currPos += 7;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c92);
                    }
                }
                if (s2 === peg$FAILED) {
                    s2 = null;
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseAccessor();
                        if (s4 === peg$FAILED) {
                            s4 = null;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseName();
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseEndLine();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c96(s2, s4, s6);
                                        s0 = s1;
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "MemberVariable",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "MemberVariable",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseInterface() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Interface",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 10).toLowerCase() === peg$c97) {
                s2 = input.substr(peg$currPos, 10);
                peg$currPos += 10;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c98);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseElementName();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseDecorators();
                            if (s6 === peg$FAILED) {
                                s6 = null;
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parse_();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseExtends();
                                    if (s8 === peg$FAILED) {
                                        s8 = null;
                                    }
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parse_();
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parseImplements();
                                            if (s10 === peg$FAILED) {
                                                s10 = null;
                                            }
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parse_();
                                                if (s11 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 123) {
                                                        s12 = peg$c31;
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s12 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c32);
                                                        }
                                                    }
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parse_();
                                                        if (s13 !== peg$FAILED) {
                                                            s14 = peg$parseNewLine();
                                                            if (s14 !== peg$FAILED) {
                                                                s15 = [];
                                                                s16 = peg$parseMember();
                                                                while (s16 !== peg$FAILED) {
                                                                    s15.push(s16);
                                                                    s16 = peg$parseMember();
                                                                }
                                                                if (s15 !== peg$FAILED) {
                                                                    s16 = peg$parse_();
                                                                    if (s16 !== peg$FAILED) {
                                                                        if (input.charCodeAt(peg$currPos) === 125) {
                                                                            s17 = peg$c17;
                                                                            peg$currPos++;
                                                                        }
                                                                        else {
                                                                            s17 = peg$FAILED;
                                                                            if (peg$silentFails === 0) {
                                                                                peg$fail(peg$c18);
                                                                            }
                                                                        }
                                                                        if (s17 !== peg$FAILED) {
                                                                            s18 = peg$parseEndLine();
                                                                            if (s18 !== peg$FAILED) {
                                                                                peg$savedPos = s0;
                                                                                s1 = peg$c99(s4, s8, s10, s15);
                                                                                s0 = s1;
                                                                            }
                                                                            else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                            }
                                                                        }
                                                                        else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    }
                                                                    else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                }
                                                                else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            }
                                                            else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 10).toLowerCase() === peg$c97) {
                    s2 = input.substr(peg$currPos, 10);
                    peg$currPos += 10;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c98);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseElementName();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseDecorators();
                                if (s6 === peg$FAILED) {
                                    s6 = null;
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parse_();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parseExtends();
                                        if (s8 === peg$FAILED) {
                                            s8 = null;
                                        }
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parse_();
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parseImplements();
                                                if (s10 === peg$FAILED) {
                                                    s10 = null;
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parse_();
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parseEndLine();
                                                        if (s12 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c100(s4, s8, s10);
                                                            s0 = s1;
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Interface",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Interface",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseEnum() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Enum",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c101) {
                s2 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c102);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseElementName();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseDecorators();
                            if (s6 === peg$FAILED) {
                                s6 = null;
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parse_();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseExtends();
                                    if (s8 === peg$FAILED) {
                                        s8 = null;
                                    }
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parse_();
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parseImplements();
                                            if (s10 === peg$FAILED) {
                                                s10 = null;
                                            }
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parse_();
                                                if (s11 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 123) {
                                                        s12 = peg$c31;
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s12 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c32);
                                                        }
                                                    }
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parse_();
                                                        if (s13 !== peg$FAILED) {
                                                            s14 = peg$parseNewLine();
                                                            if (s14 !== peg$FAILED) {
                                                                s15 = [];
                                                                s16 = peg$parseMember();
                                                                while (s16 !== peg$FAILED) {
                                                                    s15.push(s16);
                                                                    s16 = peg$parseMember();
                                                                }
                                                                if (s15 !== peg$FAILED) {
                                                                    s16 = peg$parse_();
                                                                    if (s16 !== peg$FAILED) {
                                                                        if (input.charCodeAt(peg$currPos) === 125) {
                                                                            s17 = peg$c17;
                                                                            peg$currPos++;
                                                                        }
                                                                        else {
                                                                            s17 = peg$FAILED;
                                                                            if (peg$silentFails === 0) {
                                                                                peg$fail(peg$c18);
                                                                            }
                                                                        }
                                                                        if (s17 !== peg$FAILED) {
                                                                            s18 = peg$parseEndLine();
                                                                            if (s18 !== peg$FAILED) {
                                                                                peg$savedPos = s0;
                                                                                s1 = peg$c103(s4, s8, s10, s15);
                                                                                s0 = s1;
                                                                            }
                                                                            else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                            }
                                                                        }
                                                                        else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    }
                                                                    else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                }
                                                                else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            }
                                                            else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 5).toLowerCase() === peg$c101) {
                    s2 = input.substr(peg$currPos, 5);
                    peg$currPos += 5;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c102);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseElementName();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseDecorators();
                                if (s6 === peg$FAILED) {
                                    s6 = null;
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parse_();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parseExtends();
                                        if (s8 === peg$FAILED) {
                                            s8 = null;
                                        }
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parse_();
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parseImplements();
                                                if (s10 === peg$FAILED) {
                                                    s10 = null;
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parse_();
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parseEndLine();
                                                        if (s12 !== peg$FAILED) {
                                                            peg$savedPos = s0;
                                                            s1 = peg$c104(s4, s8, s10);
                                                            s0 = s1;
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Enum",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Enum",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseComponent() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Component",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 10).toLowerCase() === peg$c105) {
                s2 = input.substr(peg$currPos, 10);
                peg$currPos += 10;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c106);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseElementName();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseStereotype();
                            if (s6 === peg$FAILED) {
                                s6 = null;
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseEndLine();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c107(s4);
                                    s0 = s1;
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseShortComponent();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseEndLine();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c107(s2);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Component",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Component",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseShortComponent() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "ShortComponent",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 91) {
            s1 = peg$c108;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c109);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 93) {
                s5 = peg$c110;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c111);
                }
            }
            if (s5 === peg$FAILED) {
                s5 = peg$parseNewLine();
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
                s4 = undefined;
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c3);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 93) {
                        s5 = peg$c110;
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c111);
                        }
                    }
                    if (s5 === peg$FAILED) {
                        s5 = peg$parseNewLine();
                    }
                    peg$silentFails--;
                    if (s5 === peg$FAILED) {
                        s4 = undefined;
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c3);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
            }
            else {
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 93) {
                    s3 = peg$c110;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c111);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c112) {
                            s5 = peg$c112;
                            peg$currPos += 2;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c113);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseName();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c114(s2, s7);
                                    s0 = s1;
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c108;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c109);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 93) {
                    s5 = peg$c110;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c111);
                    }
                }
                if (s5 === peg$FAILED) {
                    s5 = peg$parseNewLine();
                }
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                    s4 = undefined;
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c3);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 93) {
                            s5 = peg$c110;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c111);
                            }
                        }
                        if (s5 === peg$FAILED) {
                            s5 = peg$parseNewLine();
                        }
                        peg$silentFails--;
                        if (s5 === peg$FAILED) {
                            s4 = undefined;
                        }
                        else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            }
                            else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c3);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s4 = [s4, s5];
                                s3 = s4;
                            }
                            else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                }
                else {
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                        s3 = peg$c110;
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c111);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c115(s2);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "ShortComponent",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "ShortComponent",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseUseCase() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "UseCase",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            if (input.substr(peg$currPos, 8).toLowerCase() === peg$c116) {
                s2 = input.substr(peg$currPos, 8);
                peg$currPos += 8;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c117);
                }
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseElementName();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseEndLine();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c118(s4);
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseShortUseCase();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseEndLine();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c118(s2);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "UseCase",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "UseCase",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseShortUseCase() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "ShortUseCase",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c8;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c9);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 41) {
                s5 = peg$c14;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c15);
                }
            }
            if (s5 === peg$FAILED) {
                s5 = peg$parseNewLine();
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
                s4 = undefined;
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c3);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 41) {
                        s5 = peg$c14;
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c15);
                        }
                    }
                    if (s5 === peg$FAILED) {
                        s5 = peg$parseNewLine();
                    }
                    peg$silentFails--;
                    if (s5 === peg$FAILED) {
                        s4 = undefined;
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c3);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
            }
            else {
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                    s3 = peg$c14;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c15);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c112) {
                            s5 = peg$c112;
                            peg$currPos += 2;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c113);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseName();
                                if (s7 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c114(s2, s7);
                                    s0 = s1;
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c8;
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c9);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                s4 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 41) {
                    s5 = peg$c14;
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c15);
                    }
                }
                if (s5 === peg$FAILED) {
                    s5 = peg$parseNewLine();
                }
                peg$silentFails--;
                if (s5 === peg$FAILED) {
                    s4 = undefined;
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s5 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c3);
                        }
                    }
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$currPos;
                        s4 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 41) {
                            s5 = peg$c14;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c15);
                            }
                        }
                        if (s5 === peg$FAILED) {
                            s5 = peg$parseNewLine();
                        }
                        peg$silentFails--;
                        if (s5 === peg$FAILED) {
                            s4 = undefined;
                        }
                        else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                        if (s4 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s5 = input.charAt(peg$currPos);
                                peg$currPos++;
                            }
                            else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c3);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                s4 = [s4, s5];
                                s3 = s4;
                            }
                            else {
                                peg$currPos = s3;
                                s3 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                }
                else {
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                        s3 = peg$c14;
                        peg$currPos++;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c15);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c115(s2);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "ShortUseCase",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "ShortUseCase",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseRelationship() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Relationship",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseElementReference();
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseQuotedString();
                    if (s4 === peg$FAILED) {
                        s4 = null;
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parse_();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parseRelationshipArrowHead();
                            if (s6 === peg$FAILED) {
                                s6 = null;
                            }
                            if (s6 !== peg$FAILED) {
                                s7 = peg$parseRelationshipArrowBody();
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parseRelationshipHidden();
                                    if (s8 === peg$FAILED) {
                                        s8 = null;
                                    }
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseDirection();
                                        if (s9 === peg$FAILED) {
                                            s9 = null;
                                        }
                                        if (s9 !== peg$FAILED) {
                                            s10 = peg$parseRelationshipArrowBody();
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parseRelationshipArrowHead();
                                                if (s11 === peg$FAILED) {
                                                    s11 = null;
                                                }
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parse_();
                                                    if (s12 !== peg$FAILED) {
                                                        s13 = peg$parseQuotedString();
                                                        if (s13 === peg$FAILED) {
                                                            s13 = null;
                                                        }
                                                        if (s13 !== peg$FAILED) {
                                                            s14 = peg$parse_();
                                                            if (s14 !== peg$FAILED) {
                                                                s15 = peg$parseElementReference();
                                                                if (s15 !== peg$FAILED) {
                                                                    s16 = peg$parse_();
                                                                    if (s16 !== peg$FAILED) {
                                                                        s17 = peg$parseRelationshipLabel();
                                                                        if (s17 === peg$FAILED) {
                                                                            s17 = null;
                                                                        }
                                                                        if (s17 !== peg$FAILED) {
                                                                            s18 = peg$parseEndLine();
                                                                            if (s18 !== peg$FAILED) {
                                                                                peg$savedPos = s0;
                                                                                s1 = peg$c119(s2, s4, s6, s7, s8, s10, s11, s13, s15, s17);
                                                                                s0 = s1;
                                                                            }
                                                                            else {
                                                                                peg$currPos = s0;
                                                                                s0 = peg$FAILED;
                                                                            }
                                                                        }
                                                                        else {
                                                                            peg$currPos = s0;
                                                                            s0 = peg$FAILED;
                                                                        }
                                                                    }
                                                                    else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                }
                                                                else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            }
                                                            else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseElementReference();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseQuotedString();
                        if (s4 === peg$FAILED) {
                            s4 = null;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseRelationshipArrowHead();
                                if (s6 === peg$FAILED) {
                                    s6 = null;
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parseRelationshipArrowBody();
                                    if (s7 !== peg$FAILED) {
                                        s8 = peg$parseRelationshipArrowHead();
                                        if (s8 === peg$FAILED) {
                                            s8 = null;
                                        }
                                        if (s8 !== peg$FAILED) {
                                            s9 = peg$parse_();
                                            if (s9 !== peg$FAILED) {
                                                s10 = peg$parseQuotedString();
                                                if (s10 === peg$FAILED) {
                                                    s10 = null;
                                                }
                                                if (s10 !== peg$FAILED) {
                                                    s11 = peg$parse_();
                                                    if (s11 !== peg$FAILED) {
                                                        s12 = peg$parseElementReference();
                                                        if (s12 !== peg$FAILED) {
                                                            s13 = peg$parse_();
                                                            if (s13 !== peg$FAILED) {
                                                                s14 = peg$parseRelationshipLabel();
                                                                if (s14 === peg$FAILED) {
                                                                    s14 = null;
                                                                }
                                                                if (s14 !== peg$FAILED) {
                                                                    s15 = peg$parseEndLine();
                                                                    if (s15 !== peg$FAILED) {
                                                                        peg$savedPos = s0;
                                                                        s1 = peg$c120(s2, s4, s6, s7, s8, s10, s12, s14);
                                                                        s0 = s1;
                                                                    }
                                                                    else {
                                                                        peg$currPos = s0;
                                                                        s0 = peg$FAILED;
                                                                    }
                                                                }
                                                                else {
                                                                    peg$currPos = s0;
                                                                    s0 = peg$FAILED;
                                                                }
                                                            }
                                                            else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Relationship",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Relationship",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseRelationshipArrowHead() {
        var startPos = peg$currPos;
        var s0;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "RelationshipArrowHead",
            location: peg$computeLocation(startPos, startPos)
        });
        if (input.substr(peg$currPos, 2) === peg$c121) {
            s0 = peg$c121;
            peg$currPos += 2;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c122);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c123) {
                s0 = peg$c123;
                peg$currPos += 2;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c124);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 42) {
                    s0 = peg$c125;
                    peg$currPos++;
                }
                else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c126);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 111) {
                        s0 = peg$c127;
                        peg$currPos++;
                    }
                    else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c128);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 60) {
                            s0 = peg$c129;
                            peg$currPos++;
                        }
                        else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c130);
                            }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 62) {
                                s0 = peg$c131;
                                peg$currPos++;
                            }
                            else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c132);
                                }
                            }
                            if (s0 === peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 35) {
                                    s0 = peg$c133;
                                    peg$currPos++;
                                }
                                else {
                                    s0 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c134);
                                    }
                                }
                                if (s0 === peg$FAILED) {
                                    if (input.charCodeAt(peg$currPos) === 120) {
                                        s0 = peg$c135;
                                        peg$currPos++;
                                    }
                                    else {
                                        s0 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c136);
                                        }
                                    }
                                    if (s0 === peg$FAILED) {
                                        if (input.charCodeAt(peg$currPos) === 125) {
                                            s0 = peg$c17;
                                            peg$currPos++;
                                        }
                                        else {
                                            s0 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c18);
                                            }
                                        }
                                        if (s0 === peg$FAILED) {
                                            if (input.charCodeAt(peg$currPos) === 123) {
                                                s0 = peg$c31;
                                                peg$currPos++;
                                            }
                                            else {
                                                s0 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c32);
                                                }
                                            }
                                            if (s0 === peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 43) {
                                                    s0 = peg$c137;
                                                    peg$currPos++;
                                                }
                                                else {
                                                    s0 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c138);
                                                    }
                                                }
                                                if (s0 === peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 94) {
                                                        s0 = peg$c139;
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s0 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c140);
                                                        }
                                                    }
                                                    if (s0 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 2) === peg$c141) {
                                                            s0 = peg$c141;
                                                            peg$currPos += 2;
                                                        }
                                                        else {
                                                            s0 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c142);
                                                            }
                                                        }
                                                        if (s0 === peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 40) {
                                                                s0 = peg$c8;
                                                                peg$currPos++;
                                                            }
                                                            else {
                                                                s0 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c9);
                                                                }
                                                            }
                                                            if (s0 === peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 41) {
                                                                    s0 = peg$c14;
                                                                    peg$currPos++;
                                                                }
                                                                else {
                                                                    s0 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c15);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "RelationshipArrowHead",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "RelationshipArrowHead",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseRelationshipArrowBody() {
        var startPos = peg$currPos;
        var s0, s1, s2;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "RelationshipArrowBody",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = [];
        if (peg$c143.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c144);
            }
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$c143.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c144);
                    }
                }
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c145();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = [];
            if (peg$c146.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c147);
                }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c146.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c147);
                        }
                    }
                }
            }
            else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c148();
            }
            s0 = s1;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "RelationshipArrowBody",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "RelationshipArrowBody",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseRelationshipLabel() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "RelationshipLabel",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 58) {
            s1 = peg$c59;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c60);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                s6 = peg$parseNewLine();
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                    s5 = undefined;
                }
                else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c3);
                        }
                    }
                    if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$currPos;
                        s5 = peg$currPos;
                        peg$silentFails++;
                        s6 = peg$parseNewLine();
                        peg$silentFails--;
                        if (s6 === peg$FAILED) {
                            s5 = undefined;
                        }
                        else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s6 = input.charAt(peg$currPos);
                                peg$currPos++;
                            }
                            else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c3);
                                }
                            }
                            if (s6 !== peg$FAILED) {
                                s5 = [s5, s6];
                                s4 = s5;
                            }
                            else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                    }
                }
                else {
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c149(s3);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "RelationshipLabel",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "RelationshipLabel",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseRelationshipHidden() {
        var startPos = peg$currPos;
        var s0;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "RelationshipHidden",
            location: peg$computeLocation(startPos, startPos)
        });
        if (input.substr(peg$currPos, 8) === peg$c150) {
            s0 = peg$c150;
            peg$currPos += 8;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c151);
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "RelationshipHidden",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "RelationshipHidden",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseExtends() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Extends",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 8).toLowerCase() === peg$c152) {
            s1 = input.substr(peg$currPos, 8);
            peg$currPos += 8;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c153);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseNameList();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c154(s3);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Extends",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Extends",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseImplements() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Implements",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c155) {
            s1 = input.substr(peg$currPos, 11);
            peg$currPos += 11;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c156);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseNameList();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c154(s3);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Implements",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Implements",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseNotImplementedBlock() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "NotImplementedBlock",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseNotImplementedBlockType();
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 32) {
                    s3 = peg$c38;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c39);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseElementName();
                        if (s5 !== peg$FAILED) {
                            s6 = peg$parse_();
                            if (s6 !== peg$FAILED) {
                                if (input.charCodeAt(peg$currPos) === 123) {
                                    s7 = peg$c31;
                                    peg$currPos++;
                                }
                                else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c32);
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s8 = peg$parse_();
                                    if (s8 !== peg$FAILED) {
                                        s9 = peg$parseNewLine();
                                        if (s9 !== peg$FAILED) {
                                            s10 = [];
                                            s11 = peg$currPos;
                                            s12 = peg$currPos;
                                            peg$silentFails++;
                                            s13 = peg$currPos;
                                            s14 = peg$parseNewLine();
                                            if (s14 !== peg$FAILED) {
                                                s15 = peg$parse_();
                                                if (s15 !== peg$FAILED) {
                                                    if (input.charCodeAt(peg$currPos) === 125) {
                                                        s16 = peg$c17;
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s16 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c18);
                                                        }
                                                    }
                                                    if (s16 !== peg$FAILED) {
                                                        s17 = peg$parseNewLine();
                                                        if (s17 !== peg$FAILED) {
                                                            s14 = [s14, s15, s16, s17];
                                                            s13 = s14;
                                                        }
                                                        else {
                                                            peg$currPos = s13;
                                                            s13 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s13;
                                                        s13 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s13;
                                                    s13 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s13;
                                                s13 = peg$FAILED;
                                            }
                                            peg$silentFails--;
                                            if (s13 === peg$FAILED) {
                                                s12 = undefined;
                                            }
                                            else {
                                                peg$currPos = s12;
                                                s12 = peg$FAILED;
                                            }
                                            if (s12 !== peg$FAILED) {
                                                if (input.length > peg$currPos) {
                                                    s13 = input.charAt(peg$currPos);
                                                    peg$currPos++;
                                                }
                                                else {
                                                    s13 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c3);
                                                    }
                                                }
                                                if (s13 !== peg$FAILED) {
                                                    s12 = [s12, s13];
                                                    s11 = s12;
                                                }
                                                else {
                                                    peg$currPos = s11;
                                                    s11 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s11;
                                                s11 = peg$FAILED;
                                            }
                                            while (s11 !== peg$FAILED) {
                                                s10.push(s11);
                                                s11 = peg$currPos;
                                                s12 = peg$currPos;
                                                peg$silentFails++;
                                                s13 = peg$currPos;
                                                s14 = peg$parseNewLine();
                                                if (s14 !== peg$FAILED) {
                                                    s15 = peg$parse_();
                                                    if (s15 !== peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 125) {
                                                            s16 = peg$c17;
                                                            peg$currPos++;
                                                        }
                                                        else {
                                                            s16 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c18);
                                                            }
                                                        }
                                                        if (s16 !== peg$FAILED) {
                                                            s17 = peg$parseNewLine();
                                                            if (s17 !== peg$FAILED) {
                                                                s14 = [s14, s15, s16, s17];
                                                                s13 = s14;
                                                            }
                                                            else {
                                                                peg$currPos = s13;
                                                                s13 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s13;
                                                            s13 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s13;
                                                        s13 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s13;
                                                    s13 = peg$FAILED;
                                                }
                                                peg$silentFails--;
                                                if (s13 === peg$FAILED) {
                                                    s12 = undefined;
                                                }
                                                else {
                                                    peg$currPos = s12;
                                                    s12 = peg$FAILED;
                                                }
                                                if (s12 !== peg$FAILED) {
                                                    if (input.length > peg$currPos) {
                                                        s13 = input.charAt(peg$currPos);
                                                        peg$currPos++;
                                                    }
                                                    else {
                                                        s13 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c3);
                                                        }
                                                    }
                                                    if (s13 !== peg$FAILED) {
                                                        s12 = [s12, s13];
                                                        s11 = s12;
                                                    }
                                                    else {
                                                        peg$currPos = s11;
                                                        s11 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s11;
                                                    s11 = peg$FAILED;
                                                }
                                            }
                                            if (s10 !== peg$FAILED) {
                                                s11 = peg$parseNewLine();
                                                if (s11 !== peg$FAILED) {
                                                    s12 = peg$parse_();
                                                    if (s12 !== peg$FAILED) {
                                                        if (input.charCodeAt(peg$currPos) === 125) {
                                                            s13 = peg$c17;
                                                            peg$currPos++;
                                                        }
                                                        else {
                                                            s13 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c18);
                                                            }
                                                        }
                                                        if (s13 !== peg$FAILED) {
                                                            s14 = peg$parseEndLine();
                                                            if (s14 !== peg$FAILED) {
                                                                peg$savedPos = s0;
                                                                s1 = peg$c33(s5);
                                                                s0 = s1;
                                                            }
                                                            else {
                                                                peg$currPos = s0;
                                                                s0 = peg$FAILED;
                                                            }
                                                        }
                                                        else {
                                                            peg$currPos = s0;
                                                            s0 = peg$FAILED;
                                                        }
                                                    }
                                                    else {
                                                        peg$currPos = s0;
                                                        s0 = peg$FAILED;
                                                    }
                                                }
                                                else {
                                                    peg$currPos = s0;
                                                    s0 = peg$FAILED;
                                                }
                                            }
                                            else {
                                                peg$currPos = s0;
                                                s0 = peg$FAILED;
                                            }
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "NotImplementedBlock",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "NotImplementedBlock",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseNotImplementedBlockType() {
        var startPos = peg$currPos;
        var s0;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "NotImplementedBlockType",
            location: peg$computeLocation(startPos, startPos)
        });
        if (input.substr(peg$currPos, 7).toLowerCase() === peg$c157) {
            s0 = input.substr(peg$currPos, 7);
            peg$currPos += 7;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c158);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c159) {
                s0 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c160);
                }
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "NotImplementedBlockType",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "NotImplementedBlockType",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseElementReference() {
        var startPos = peg$currPos;
        var s0, s1;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "ElementReference",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parseShortComponent();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c161(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseShortUseCase();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c162(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseName();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c163(s1);
                }
                s0 = s1;
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "ElementReference",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "ElementReference",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseMemberReference() {
        var startPos = peg$currPos;
        var s0, s1;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "MemberReference",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parseName();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c163(s1);
        }
        s0 = s1;
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "MemberReference",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "MemberReference",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseElementName() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "ElementName",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parseQuotedString();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c62) {
                    s3 = input.substr(peg$currPos, 3);
                    peg$currPos += 3;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c164);
                    }
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseName();
                        if (s5 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c165(s1, s5);
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parseName();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c62) {
                        s3 = input.substr(peg$currPos, 3);
                        peg$currPos += 3;
                    }
                    else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c164);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseQuotedString();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c166(s1, s5);
                                s0 = s1;
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseName();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c62) {
                            s3 = input.substr(peg$currPos, 3);
                            peg$currPos += 3;
                        }
                        else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c164);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseName();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c165(s1, s5);
                                    s0 = s1;
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parse_();
                    if (s1 !== peg$FAILED) {
                        s2 = peg$parseQuotedString();
                        if (s2 !== peg$FAILED) {
                            s3 = peg$parse_();
                            if (s3 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c167(s2);
                                s0 = s1;
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                    if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        s1 = peg$parseShortUseCase();
                        if (s1 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c168(s1);
                        }
                        s0 = s1;
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = peg$parseShortComponent();
                            if (s1 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c168(s1);
                            }
                            s0 = s1;
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$parse_();
                                if (s1 !== peg$FAILED) {
                                    s2 = peg$parseName();
                                    if (s2 !== peg$FAILED) {
                                        s3 = peg$parse_();
                                        if (s3 !== peg$FAILED) {
                                            peg$savedPos = s0;
                                            s1 = peg$c167(s2);
                                            s0 = s1;
                                        }
                                        else {
                                            peg$currPos = s0;
                                            s0 = peg$FAILED;
                                        }
                                    }
                                    else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "ElementName",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "ElementName",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseQuotedString() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "QuotedString",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c169;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c170);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 34) {
                s5 = peg$c169;
                peg$currPos++;
            }
            else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c170);
                }
            }
            if (s5 === peg$FAILED) {
                s5 = peg$parseNewLine();
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
                s4 = undefined;
            }
            else {
                peg$currPos = s4;
                s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c3);
                    }
                }
                if (s5 !== peg$FAILED) {
                    s4 = [s4, s5];
                    s3 = s4;
                }
                else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    s4 = peg$currPos;
                    peg$silentFails++;
                    if (input.charCodeAt(peg$currPos) === 34) {
                        s5 = peg$c169;
                        peg$currPos++;
                    }
                    else {
                        s5 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c170);
                        }
                    }
                    if (s5 === peg$FAILED) {
                        s5 = peg$parseNewLine();
                    }
                    peg$silentFails--;
                    if (s5 === peg$FAILED) {
                        s4 = undefined;
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                        if (input.length > peg$currPos) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c3);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        }
                        else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
            }
            else {
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                    s3 = peg$c169;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c170);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c171(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "QuotedString",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "QuotedString",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseName() {
        var startPos = peg$currPos;
        var s0, s1, s2;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Name",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = [];
        if (peg$c172.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c173);
            }
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$c172.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c173);
                    }
                }
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c174(s1);
        }
        s0 = s1;
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Name",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Name",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseNameList() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "NameList",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseNameListItem();
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseNameListItem();
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseName();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c175(s1, s3);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "NameList",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "NameList",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseNameListItem() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "NameListItem",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parse_();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseName();
            if (s2 !== peg$FAILED) {
                s3 = peg$parse_();
                if (s3 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s4 = peg$c176;
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c177);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c178(s2);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "NameListItem",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "NameListItem",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseDecorators() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Decorators",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = peg$parseGenerics();
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseStereotype();
                if (s3 !== peg$FAILED) {
                    s1 = [s1, s2, s3];
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
            s0 = peg$parseStereotype();
            if (s0 === peg$FAILED) {
                s0 = peg$parseGenerics();
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Decorators",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Decorators",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseGenerics() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Generics",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 60) {
            s1 = peg$c129;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c130);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                if (input.charCodeAt(peg$currPos) === 62) {
                    s6 = peg$c131;
                    peg$currPos++;
                }
                else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c132);
                    }
                }
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                    s5 = undefined;
                }
                else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c3);
                        }
                    }
                    if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$currPos;
                        s5 = peg$currPos;
                        peg$silentFails++;
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s6 = peg$c131;
                            peg$currPos++;
                        }
                        else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c132);
                            }
                        }
                        peg$silentFails--;
                        if (s6 === peg$FAILED) {
                            s5 = undefined;
                        }
                        else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s6 = input.charAt(peg$currPos);
                                peg$currPos++;
                            }
                            else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c3);
                                }
                            }
                            if (s6 !== peg$FAILED) {
                                s5 = [s5, s6];
                                s4 = s5;
                            }
                            else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                    }
                }
                else {
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s5 = peg$c131;
                            peg$currPos++;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c132);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5];
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Generics",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Generics",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseStereotype() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4, s5, s6;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Stereotype",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c179) {
            s1 = peg$c179;
            peg$currPos += 2;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c180);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parse_();
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$currPos;
                s5 = peg$currPos;
                peg$silentFails++;
                if (input.substr(peg$currPos, 2) === peg$c181) {
                    s6 = peg$c181;
                    peg$currPos += 2;
                }
                else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c182);
                    }
                }
                peg$silentFails--;
                if (s6 === peg$FAILED) {
                    s5 = undefined;
                }
                else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                    if (input.length > peg$currPos) {
                        s6 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c3);
                        }
                    }
                    if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                    }
                    else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    while (s4 !== peg$FAILED) {
                        s3.push(s4);
                        s4 = peg$currPos;
                        s5 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 2) === peg$c181) {
                            s6 = peg$c181;
                            peg$currPos += 2;
                        }
                        else {
                            s6 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c182);
                            }
                        }
                        peg$silentFails--;
                        if (s6 === peg$FAILED) {
                            s5 = undefined;
                        }
                        else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                            if (input.length > peg$currPos) {
                                s6 = input.charAt(peg$currPos);
                                peg$currPos++;
                            }
                            else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c3);
                                }
                            }
                            if (s6 !== peg$FAILED) {
                                s5 = [s5, s6];
                                s4 = s5;
                            }
                            else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                    }
                }
                else {
                    s3 = peg$FAILED;
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parse_();
                    if (s4 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c181) {
                            s5 = peg$c181;
                            peg$currPos += 2;
                        }
                        else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c182);
                            }
                        }
                        if (s5 !== peg$FAILED) {
                            s1 = [s1, s2, s3, s4, s5];
                            s0 = s1;
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Stereotype",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Stereotype",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseAccessor() {
        var startPos = peg$currPos;
        var s0;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Accessor",
            location: peg$computeLocation(startPos, startPos)
        });
        if (peg$c183.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c184);
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Accessor",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Accessor",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseColor() {
        var startPos = peg$currPos;
        var s0, s1, s2;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Color",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = [];
        if (peg$c185.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c186);
            }
        }
        if (s2 !== peg$FAILED) {
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                if (peg$c185.test(input.charAt(peg$currPos))) {
                    s2 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c186);
                    }
                }
            }
        }
        else {
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c187(s1);
        }
        s0 = s1;
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Color",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Color",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseDirection() {
        var startPos = peg$currPos;
        var s0;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "Direction",
            location: peg$computeLocation(startPos, startPos)
        });
        if (input.substr(peg$currPos, 4).toLowerCase() === peg$c188) {
            s0 = input.substr(peg$currPos, 4);
            peg$currPos += 4;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c189);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5).toLowerCase() === peg$c190) {
                s0 = input.substr(peg$currPos, 5);
                peg$currPos += 5;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c191);
                }
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c192) {
                    s0 = input.substr(peg$currPos, 2);
                    peg$currPos += 2;
                }
                else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c193);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c194) {
                        s0 = input.substr(peg$currPos, 4);
                        peg$currPos += 4;
                    }
                    else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c195);
                        }
                    }
                    if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c196) {
                            s0 = input.substr(peg$currPos, 3);
                            peg$currPos += 3;
                        }
                        else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c197);
                            }
                        }
                        if (s0 === peg$FAILED) {
                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c198) {
                                s0 = input.substr(peg$currPos, 6);
                                peg$currPos += 6;
                            }
                            else {
                                s0 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c199);
                                }
                            }
                        }
                    }
                }
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "Direction",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "Direction",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parse_() {
        var startPos = peg$currPos;
        var s0, s1;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "_",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = [];
        if (peg$c200.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c201);
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            if (peg$c200.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c201);
                }
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "_",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "_",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseNewLine() {
        var startPos = peg$currPos;
        var s0;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "NewLine",
            location: peg$computeLocation(startPos, startPos)
        });
        if (input.charCodeAt(peg$currPos) === 10) {
            s0 = peg$c202;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c203);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c204) {
                s0 = peg$c204;
                peg$currPos += 2;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c205);
                }
            }
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "NewLine",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "NewLine",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    function peg$parseEndLine() {
        var startPos = peg$currPos;
        var s0, s1, s2, s3, s4;
        peg$tracer.trace({
            type: "rule.enter",
            rule: "EndLine",
            location: peg$computeLocation(startPos, startPos)
        });
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$currPos;
        s3 = peg$currPos;
        peg$silentFails++;
        s4 = peg$parseNewLine();
        peg$silentFails--;
        if (s4 === peg$FAILED) {
            s3 = undefined;
        }
        else {
            peg$currPos = s3;
            s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
            if (input.length > peg$currPos) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c3);
                }
            }
            if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s2;
            s2 = peg$FAILED;
        }
        while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$currPos;
            s3 = peg$currPos;
            peg$silentFails++;
            s4 = peg$parseNewLine();
            peg$silentFails--;
            if (s4 === peg$FAILED) {
                s3 = undefined;
            }
            else {
                peg$currPos = s3;
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                if (input.length > peg$currPos) {
                    s4 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c3);
                    }
                }
                if (s4 !== peg$FAILED) {
                    s3 = [s3, s4];
                    s2 = s3;
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseNewLine();
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        if (s0 !== peg$FAILED) {
            peg$tracer.trace({
                type: "rule.match",
                rule: "EndLine",
                result: s0,
                location: peg$computeLocation(startPos, peg$currPos)
            });
        }
        else {
            peg$tracer.trace({
                type: "rule.fail",
                rule: "EndLine",
                location: peg$computeLocation(startPos, startPos)
            });
        }
        return s0;
    }
    /**
     * Extract the actual text when matched using negative subexpression matching.
     * Example:
     *  text:(!NewLine .)+ EndLine
     * Input:
     *  [
     *    [
     *      [null]
     *      "f"
     *    ]
     *    [
     *      [null]
     *      "o"
     *    ]
     *    [
     *      [null]
     *      "o"
     *    ]
     *  ]
     * Output:
     *  "foo"
     */
    function extractText(text) {
        return text.map(function (c) { return c[1]; }).join('').trim();
    }
    /**
     * Remove all undefined elements in an array
     * Input: [1, 2, undefined, 3]
     * Output: [1, 2, 3]
     */
    function removeUndefined(array) {
        return array.filter(function (e) { return e !== undefined; });
    }
    peg$result = peg$startRuleFunction();
    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    }
    else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
}
exports.parse = peg$parse;

//# sourceMappingURL=plantuml-trace.js.map
